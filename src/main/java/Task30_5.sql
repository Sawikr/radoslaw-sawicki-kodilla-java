ALTER TABLE BOOKS DROP BESTSELLER;
ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN DEFAULT FALSE;

DROP FUNCTION IF EXISTS UpdateBook;

DELIMITER $$

CREATE FUNCTION UpdateBook(booksRented INT) RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE result BOOLEAN;
    IF (booksRented >= 2) THEN
        SET result = TRUE;
    ELSE
        SET result = FALSE;
    END IF;
    RETURN result;
END $$

DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE RDR_ID, BOOKS_READ INT;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_BOOKS;
    WHILE (FINISHED = 0) DO
            FETCH ALL_BOOKS INTO RDR_ID;
            IF (FINISHED = 0) THEN
                SELECT COUNT(*) FROM RENTS
                WHERE BOOK_ID = RDR_ID
                INTO BOOKS_READ;

                UPDATE BOOKS SET BESTSELLER = UpdateBook(BOOKS_READ)
                WHERE BOOK_ID = RDR_ID;
                COMMIT;
            END IF;
        END WHILE;

    CLOSE ALL_BOOKS;
END $$

DELIMITER ;

#Task 30.5

CREATE TABLE IF NOT EXISTS STATS (
    STAT_ID INT(11) AUTO_INCREMENT PRIMARY KEY,
    STAT_DATE DATETIME NOT NULL,
    STAT VARCHAR(20) NOT NULL,
    VALUE INT(11) NOT NULL
);

DROP VIEW IF EXISTS BESTSELLERS_COUNT;

CREATE VIEW BESTSELLERS_COUNT AS
SELECT COUNT(*) FROM BOOKS WHERE BESTSELLER = 1;

USE KODILLA_COURSE;

CREATE EVENT IF NOT EXISTS UPDATE_BESTSELLERS
    ON SCHEDULE EVERY 1 MINUTE
    COMMENT 'Update table STATS'
    DO
    BEGIN
        DECLARE BESTSELLERS_COUNT INT;
        CALL UpdateBestSellers();

        SELECT * FROM BESTSELLERS_COUNT
        INTO BESTSELLERS_COUNT;

        INSERT INTO STATS (STAT_DATE, STAT, VALUE)
        VALUES (CURDATE(), 'BESTSELLERS', BESTSELLERS_COUNT);
    END;

SELECT * FROM STATS;

DROP EVENT UPDATE_BESTSELLERS;